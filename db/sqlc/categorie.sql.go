// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: categorie.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
insert into categories (
    user_id,
    title,
    type,
    description
) values (
    $1, $2, $3, $4
) returning id, user_id, title, type, description, create_at
`

type CreateCategoryParams struct {
	UserID      int32  `json:"user_id"`
	Title       string `json:"title"`
	Type        string `json:"type"`
	Description string `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.UserID,
		arg.Title,
		arg.Type,
		arg.Description,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.CreateAt,
	)
	return i, err
}

const getCategories = `-- name: GetCategories :many
select id, user_id, title, type, description, create_at from categories where user_id = $1 and type = $2 and title like $3 and description like $4
`

type GetCategoriesParams struct {
	UserID      int32  `json:"user_id"`
	Type        string `json:"type"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories,
		arg.UserID,
		arg.Type,
		arg.Title,
		arg.Description,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
select id, user_id, title, type, description, create_at from categories where id = $1 limit 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.CreateAt,
	)
	return i, err
}

const getCategoryByTitle = `-- name: GetCategoryByTitle :one
select id, user_id, title, type, description, create_at from categories where title = $1 limit 1
`

func (q *Queries) GetCategoryByTitle(ctx context.Context, title string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByTitle, title)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.CreateAt,
	)
	return i, err
}
